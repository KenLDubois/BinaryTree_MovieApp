@page "/"
@using System.ComponentModel.DataAnnotations;

<div class="container pt-5 fixed-top fade @showFileLoadClass">
    <div class="jumbotron mt-4 fade @showFileLoadClass pb-3">
        <h1 class="display-4">Movie Collection App</h1>
        <p class="lead">Welcome to the amazing movie collection app! To begin, <span class="font-weight-bold">please upload a text file with your movies.</span></p>
        <InputFile OnChange="HandleSelection" class="form-control-file border border bg-light p-3" />
        <p>@status</p>
    </div>
</div>

<nav class="navbar fixed-top navbar-light bg-light py-1">
    <a class="navbar-brand text-black-50">Movie Collection App</a>
    <div class="alert alert-dismissible m-0 fade @searchAlertClass" role="alert">
        @searchAlertText
        <button type="button" class="close" @onclick="closeSearchAlert">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="fade @showPageClass">
        <EditForm Model="@movieSearch" OnValidSubmit="@HandleValidSearchSubmit" class="form-inline">
            <DataAnnotationsValidator />
            @*<ValidationSummary />*@

            <ValidationMessage For="@(() => movieSearch.Title)" />
            <InputText id="title" class="form-control" placeholder="Search Title" @bind-Value="movieSearch.Title" />


            <label for="releaseYear" class="ml-3 mr-1">Release Year: </label>
            <InputNumber id="releaseYear" class="form-control" placeholder="Release Year" @bind-Value="movieSearch.Year" />
            <ValidationMessage For="@(() => movieSearch.Year)" />

            <button type="submit" class="btn btn-outline-secondary ml-2">Search</button>

        </EditForm>
    </div>
</nav>

<div class="p-4 pt-5 sidebar text-light fade @showPageClass">
    <EditForm Model="@newMovie" OnValidSubmit="@HandleValidAddSubmit" class="mt-4">
        <DataAnnotationsValidator />
        @*<ValidationSummary />*@
        <p class="font-weight-bold">
            Add New Movie
        </p>
        <label for="title">Title</label>
        <InputText id="title" class="form-control" placeholder="New Movie Title" @bind-Value="newMovie.Title" />
        <ValidationMessage For="@(() => newMovie.Title)" />

        <label for="releaseDate" class="mt-2">Release Date</label>
        <InputDate id="releaseDate" class="form-control" @bind-Value="newMovie.ReleaseDate" />
        <ValidationMessage For="@(() => newMovie.ReleaseDate)" />

        <label for="runtime" class="mt-2">Runtime:</label>
        <InputNumber id="runtime" class="form-control" @bind-Value="newMovie.Runtime" />
        <ValidationMessage For="@(() => newMovie.Runtime)" />

        <label for="director" class="mt-2">Director</label>
        <InputText id="director" class="form-control" placeholder="Director Name" @bind-Value="newMovie.Director" />
        <ValidationMessage For="@(() => newMovie.Director)" />

        <label for="releaseDate" class="mt-2">Rating</label>
        <InputNumber id="rating" class="form-control" @bind-Value="newMovie.Rating" />
        <ValidationMessage For="@(() => newMovie.Rating)" />

        <button class="btn btn-primary btn-block mt-3" type="submit">Add Movie</button>

    </EditForm>
</div>
<div class="container-fluid pt-5 fade @showPageClass">
    <div class="row pt-4">
        <div class="col-12 p-3">

            @for (int i = 1; i <= getBTreeHeight(); i++)
            {
                <div class="d-flex flex-row justify-content-around pb-4">
                    @for (int j = 1; j <= getNodesInRow(i); j++)
                    {
                        @if (getNodeIndexByPosition(i, j) < bTreeTraversal.Count && bTreeTraversal[getNodeIndexByPosition(i, j)] != null)
                        {
                            <div class="text-center border @nodeSearchClass(bTreeTraversal[getNodeIndexByPosition(i, j)]) p-3" style="width: 100px;">
                                <span class="font-weight-bold">
                                    @bTreeTraversal[getNodeIndexByPosition(i, j)].ReleaseDate.Year.ToString()
                                </span>
                                <br />
                                @bTreeTraversal[getNodeIndexByPosition(i, j)].Title
                            </div>
                        }
                        else
                        {
                            <div class="text-center border border-ligth bg-light p-3" style="width: 100px;">

                            </div>
                        }

                    }
                </div>
            }
        </div>
    </div>
    <div class="row p-5 bg-light text-secondary">
            <div class="col-6">
                <p class="lead text-black-50">
                    Movies (Depth-first)
                </p>
                <hr />
                @if (depthTraveral != null && depthTraveral.Count > 0)
                {
                    foreach (Movie movie in depthTraveral)
                    {
                        <p class="@listSearchClass(movie)">
                            @movie.Title (@movie.ReleaseDate.Year)
                        </p>
                    }
                }
            </div>
            <div class="col-6">
                <p class="lead text-black-50">Duplicates</p>
                <hr />
                @if (duplicates != null && duplicates.Count > 0)
                {
                    foreach (Movie movie in duplicates)
                    {
                        <p>
                            @movie.Title (@movie.ReleaseDate.Year)
                        </p>
                    }
                }
            </div>
        
            <div class="col-12 mt-4">
                <p class="lead text-black-50">Depth-first Traversal string</p>
                <hr />
                @movieBTree.ToString()
            </div>

    </div>
</div>

@functions {
    private string nodeSearchClass(Movie movie)
    {
        if (movie.Equals(movieSearchResult)) return "text-light bg-info";
        return "border-info";
    }

    private string listSearchClass(Movie movie)
    {
        if (movie.Equals(movieSearchResult)) return "text-info font-weight-bold";
        return "";
    }

    private void closeSearchAlert()
    {
        searchAlertClass = "hide";
    }

    private void showFileLoad(bool show)
    {
        showFileLoadClass = show ? "show" : "hide";
        showPageClass = show ? "hide" : "show";
    }

}

@code {

    string status;

    private string showFileLoadClass = "show";
    private string showPageClass = "hide";

    private string searchAlertClass = "hide";
    private string searchAlertText = "Nothing to see here.";

    private string addDataModalClass = "show";

    List<Movie> bTreeTraversal = new List<Movie>();
    List<Movie> depthTraveral = new List<Movie>();

    List<Movie> duplicates = new List<Movie>();

    BinaryTree<Movie> movieBTree = new BinaryTree<Movie>();

    private Movie newMovie = new Movie();

    private Movie movieSearchResult = null;

    private MovieSearch movieSearch = new MovieSearch();

    private class MovieSearch
    {
        [Required]
        public int Year { get; set; } = DateTime.Now.Year;
        [Required]
        public string Title { get; set; }
    }

    public int getBTreeHeight()
    {
        if (bTreeTraversal.Count <= 0) return 0;
        return (int)Math.Floor(Math.Log(bTreeTraversal.Count, 2)) + 1;
    }

    public int getNodesInRow(int row)
    {
        if (row == 0) return 0;
        return (int)(Math.Pow(2d, (double)row) / 2);
    }

    public int getMaxNodes(int height)
    {
        if (height == 0) return 0;
        return (int)(Math.Pow(2d, (double)height) - 1);
    }

    public int getMaxNodes()
    {
        int height = getBTreeHeight();
        if (height == 0) return 0;
        return (int)(Math.Pow(2d, (double)height) - 1);
    }

    public int getNodeIndexByPosition(int row, int col)
    {
        if (row == 1) return 0;

        int prevLevel = getMaxNodes(row - 1);
        return prevLevel + col - 1;
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {

            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            status = $"Finished loading {file.Size} bytes from {file.Name}";

            MovieIOService movieIO = new MovieIOService();

            List<Movie> movies = movieIO.LoadMoviesFromMemoryStream(ms);

            movieBTree = new BinaryTree<Movie>(movies, out duplicates);

            bTreeTraversal = movieBTree.GetNodes(false);
            depthTraveral = movieBTree.GetNodes(true);

            showFileLoad(false);
        }
    }

    private void HandleValidAddSubmit()
    {

        Movie movieToAdd = new Movie(newMovie.Title, newMovie.ReleaseDate, newMovie.Runtime, newMovie.Director, newMovie.Rating);

        bool addMovie = movieBTree.Add(movieToAdd);

        if (addMovie)
        {
            bTreeTraversal = movieBTree.GetNodes(false);
            depthTraveral = movieBTree.GetNodes(true);

        }
        else
        {
            duplicates.Add(movieToAdd);
        }

    }

    private void HandleValidSearchSubmit()
    {

        Movie movieToFind = new Movie(movieSearch.Title, new DateTime(movieSearch.Year, 1, 1), 0, "", 0f);

        movieSearchResult = movieBTree.Search(movieToFind);

        if (movieSearchResult == null)
        {
            searchAlertClass = "show  alert-warning";
            searchAlertText = "You do not own this movie.";
        }
        else
        {
            searchAlertClass = "show  alert-success";
            searchAlertText = "You own this movie!";
        }
    }
}